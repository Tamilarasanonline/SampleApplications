Queue (P2P) based sync request-response messaging model:
 Client looks up the service object from the service registry using lookup API call
 Endpoint topic name is extract the from the service object based on the endpoint name
 Client creates the request message object from the endpoint message schema
 Client populates the message payload with the request data
 Client publishes the message on the endpoint using publishMessage API call. The client library internally populates all the headers of the message including correlationId and replyTo topic name of the client. The library internally makes sure message is successfully published on the bus taking care of retries during failure
 Client invokes receiveMessage API call waiting for response message.
 The service which has subscribed on the topic receives the message. The message is processed by the service
 Service creates a response message object from the endpoint message schema
 Service populates the message payload with response data
 Service publishes the message on the client replyTo topic using publishMessageAPI. The client library internally populates all the headers of the message including correlationId. The library internally makes sure message is successfully published on the bus taking care of retries during failure
 Client gets the response message from the service from the receiveMessage API call

Queue (P2P) based async request-response messaging model:
 Client looks up the service object from the service registry using lookup API call
 Client invokes subscribeMessage API call to consume message asynchronously from specific
endpoint of the service.
 Endpoint topic name is extracted from the service object based on the endpoint name
 Client creates the request message object from the endpoint message schema
 Client populates the message payload with the request data
 Client publishes the message on the endpoint using publishMessage API call. The client
library internally populates all the headers of the message including correlationId and
replyTo topic name of the client. The library internally makes sure message is successfully
published on the bus taking care of retries during failure
 The service which has subscribed on the topic receives the message subscribeMessage API
call. The message is processed by the service
 Service creates response message object from the endpoint message schema
 Service populates the message payload with response data
 Service publishes the message on the client replyTo topic using publishMessageAPI . The
client library internally populates all the headers of the message including correlationId. The
library internally makes sure message is successfully published on the bus taking care of
retries during failure
 Multiple response messages can be published by service to client request
 Client gets all the response messages in the callback asynchronously

Topic (Pub-Sub) based streaming messaging model:
 Client looks up the service object from the service registry using lookup API call
 Client invokes subscribeMessage API call to consume events asynchronously from specific
endpoint of the service
 Multiple clients can subscribe to event endpoints of the service
 Service creates event message object from the endpoint message schema
 Service populates the message payload with event data
 Service publishes the event message on the event endpoint topic using publishMessageAPI.
The client library internally populates all the headers of the message. The library internally
makes sure message is successfully published on the bus taking care of retries during failure
 All clients subscribed to this event endpoint will receive the event
